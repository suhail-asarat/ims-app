import groovy.json.JsonSlurper
import org.gradle.initialization.DefaultSettings
import java.util.zip.ZipFile

def generatedFileName = "PackageList.java"
def generatedFilePackage = "co.median.android"
def generatedFileContentsTemplate = """
package $generatedFilePackage;

import android.app.Application;
import android.content.Context;
import android.content.res.Resources;

import co.median.median_core.BridgeModule;
import java.util.Arrays;
import java.util.ArrayList;

{{ packageImports }}

public class PackageList {
  private Application application;

  public PackageList(Application application) {
    this.application = application;
  }

  private Resources getResources() {
    return this.getApplication().getResources();
  }

  private Application getApplication() {
    return this.application;
  }

  private Context getApplicationContext() {
    return this.getApplication().getApplicationContext();
  }

  public ArrayList<BridgeModule> getPackages() {
    return new ArrayList<>(Arrays.<BridgeModule>asList(
      {{ packageClassInstances }}
    ));
  }
}
"""

class GoNativeModules {
    private Logger logger
    private ArrayList<HashMap<String, String>> modulesMetadata

    private packageName = "co.median.android"

    GoNativeModules(Logger logger) {
        this.logger = logger
        this.modulesMetadata = null
    }

    void setModulesMetadataFromProject(Project project) {
        this.modulesMetadata = new ArrayList<HashMap<String, String>>()

        def matchingArtifacts = project.configurations.medianPlugin.resolvedConfiguration.resolvedArtifacts.findAll { artifact ->
            artifact.moduleVersion.id.group == 'co.median.android.plugins'
        }

        matchingArtifacts.each {artifact ->
            if (artifact.type == 'aar') {
                File aarFile = artifact.file

                // Open the AAR file as a ZIP archive.
                ZipFile aarZip = new ZipFile(aarFile)
                def classesEntry = aarZip.getEntry("classes.jar")
                if (classesEntry != null) {
                    // Get an InputStream for the embedded classes.jar.
                    InputStream classesStream = aarZip.getInputStream(classesEntry)

                    // Copy the stream to a temporary file so it can be opened as a ZipFile.
                    File tempClassesFile = File.createTempFile("tempClasses", ".jar")
                    tempClassesFile.deleteOnExit()
                    tempClassesFile.withOutputStream { out ->
                        out << classesStream
                    }

                    // Now open the temporary classes.jar as a ZIP.
                    ZipFile classesZip = new ZipFile(tempClassesFile)
                    def jsonEntry = classesZip.getEntry("META-INF/plugin-metadata.json")
                    if (jsonEntry != null) {
                        String jsonText = classesZip.getInputStream(jsonEntry).getText("UTF-8")
                        def parsedJson = new JsonSlurper().parseText(jsonText)
                        modulesMetadata.push(parsedJson["plugin"])
                    }
                    classesZip.close()
                }
                aarZip.close()
            }
        }
    }

    void addModuleDependencies(Project appProject) {
        modulesMetadata.forEach { module ->
            String pluginName = module["pluginName"]
            appProject.dependencies {
                implementation project(path: ":${pluginName}")
            }
        }
    }
    
    void addPluginDependenciesFromJson(Project project) {
        File dependenciesFile = new File(project.rootDir, "dependencies.json")
        if (!dependenciesFile.exists()) {
            logger.warn("dependencies.json file not found at ${dependenciesFile.absolutePath}")
            return
        }
        
        try {
            def jsonSlurper = new JsonSlurper()
            def dependencies = jsonSlurper.parseText(dependenciesFile.text)
            def plugins = dependencies.remove("plugins")

            // Add plugins
            if (plugins) {
                project.dependencies {
                    plugins.each { key, value ->
                        implementation "co.median.android.plugins:${key}:${value}"
                        logger.info("Added plugin dependency: co.median.android.plugins:${key}:${value}")
                    }
                }
            }
        } catch (Exception e) {
            logger.error("Failed to parse dependencies.json: ${e.message}")
        }
    }

    void generatePackagesFile(File outputDir, String generatedFileName, GString generatedFileContentsTemplate) {
        def packages = this.modulesMetadata
        String packageName = this.packageName

        String packageImports = ""
        String packageClassInstances = ""

        if (packages.size() > 0) {
            packageImports = "import ${packageName}.BuildConfig;\nimport ${packageName}.R;\n\n"
            packageImports = packageImports + packages.collect {
                "// ${it.name}\nimport ${it.packageName}.${it.classInstance};"
            }.join('\n')
            packageClassInstances = packages.collect { "new ${it.classInstance}()" }.join(",\n      ")
        }

        String generatedFileContents = generatedFileContentsTemplate.toString()
                .replace("{{ packageImports }}", packageImports)
                .replace("{{ packageClassInstances }}", packageClassInstances)

        outputDir.mkdirs()
        final FileTreeBuilder treeBuilder = new FileTreeBuilder(outputDir)
        treeBuilder.file(generatedFileName).newWriter().withWriter { w ->
            w << generatedFileContents
        }
    }
}

def gonativeModules = new GoNativeModules(logger)

ext.applyNativeModulesAppBuildGradle = { Project project ->
    def generatedSrcDir = new File(buildDir, "generated/gncli/src/main/java")
    def generatedCodeDir = new File(generatedSrcDir, generatedFilePackage.replace('.', '/'))

    // Add plugin dependencies from dependencies.json
    gonativeModules.addPluginDependenciesFromJson(project)

    tasks.register('generatePackageList') {
        doLast {
            gonativeModules.setModulesMetadataFromProject(project)
            gonativeModules.generatePackagesFile(generatedCodeDir, generatedFileName, generatedFileContentsTemplate)
        }
    }


    preBuild.dependsOn generatePackageList

    android {
        sourceSets {
            main {
                java {
                    srcDirs += generatedSrcDir
                }
            }
        }
        
        packagingOptions {
            exclude 'META-INF/plugin-metadata.json'
        }
    }
}